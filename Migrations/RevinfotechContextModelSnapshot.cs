// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RevInfotech.Context;

namespace RevInfotech.Migrations
{
    [DbContext(typeof(RevinfotechContext))]
    partial class RevinfotechContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RevInfotech.Models.BlogDescription", b =>
                {
                    b.Property<Guid>("BlogDescriptionID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BlogID");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<bool>("StatusID");

                    b.HasKey("BlogDescriptionID");

                    b.HasIndex("BlogID");

                    b.ToTable("BlogDescriptions");
                });

            modelBuilder.Entity("RevInfotech.Models.BlogEntity", b =>
                {
                    b.Property<Guid>("BlogID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<string>("BlogHeading");

                    b.Property<Guid>("CategoryID");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeyword");

                    b.Property<string>("MetaTitle");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<string>("RouteName");

                    b.Property<bool>("StatusID");

                    b.HasKey("BlogID");

                    b.HasIndex("CategoryID");

                    b.ToTable("BlogEntitys");
                });

            modelBuilder.Entity("RevInfotech.Models.BlogImage", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BlogID");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("ImageURL");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<bool>("StatusID");

                    b.HasKey("ID");

                    b.HasIndex("BlogID");

                    b.ToTable("BlogImages");
                });

            modelBuilder.Entity("RevInfotech.Models.CategoryEntity", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<bool>("StatusID");

                    b.HasKey("CategoryID");

                    b.ToTable("CategoryEntitys");
                });

            modelBuilder.Entity("RevInfotech.Models.CityEntity", b =>
                {
                    b.Property<Guid>("CityID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CityCode");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<string>("PinCode");

                    b.Property<Guid>("StateID");

                    b.Property<string>("StateName");

                    b.Property<bool>("StatusID");

                    b.HasKey("CityID");

                    b.HasIndex("StateID");

                    b.ToTable("CityEntitys");
                });

            modelBuilder.Entity("RevInfotech.Models.GenericSetting", b =>
                {
                    b.Property<Guid>("SettingID");

                    b.Property<string>("AdminAccountId");

                    b.Property<string>("SettingName");

                    b.Property<string>("SubSettingName");

                    b.Property<int>("DefalutInteger1");

                    b.Property<int>("DefalutInteger2");

                    b.Property<int>("DefalutInteger3");

                    b.Property<int>("DefalutInteger4");

                    b.Property<int>("DefalutInteger5");

                    b.Property<bool>("DefaultBool1");

                    b.Property<bool>("DefaultBool2");

                    b.Property<bool>("DefaultBool3");

                    b.Property<bool>("DefaultBool4");

                    b.Property<bool>("DefaultBool5");

                    b.Property<DateTime?>("DefaultDateTime1");

                    b.Property<DateTime?>("DefaultDateTime2");

                    b.Property<DateTime?>("DefaultDateTime3");

                    b.Property<DateTime?>("DefaultDateTime4");

                    b.Property<DateTime?>("DefaultDateTime5");

                    b.Property<decimal>("DefaultDecimal1")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("DefaultDecimal2")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("DefaultDecimal3")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("DefaultDecimal4")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("DefaultDecimal5")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("DefaultTextMax");

                    b.Property<string>("DefaultTextMax1");

                    b.Property<string>("DefaultTextMax2");

                    b.Property<string>("DefaultTextMax3");

                    b.Property<string>("DefaultTextMax4");

                    b.Property<string>("DefaultTextValue100_1")
                        .HasMaxLength(100);

                    b.Property<string>("DefaultTextValue100_2")
                        .HasMaxLength(100);

                    b.Property<string>("DefaultTextValue20_1")
                        .HasMaxLength(20);

                    b.Property<string>("DefaultTextValue20_2")
                        .HasMaxLength(20);

                    b.Property<string>("DefaultTextValue250_1")
                        .HasMaxLength(250);

                    b.Property<string>("DefaultTextValue250_2")
                        .HasMaxLength(250);

                    b.Property<string>("DefaultTextValue50_1")
                        .HasMaxLength(50);

                    b.Property<string>("DefaultTextValue50_2")
                        .HasMaxLength(50);

                    b.HasKey("SettingID", "AdminAccountId", "SettingName", "SubSettingName");

                    b.HasAlternateKey("AdminAccountId", "SettingID", "SettingName", "SubSettingName");

                    b.ToTable("GenericSetting");
                });

            modelBuilder.Entity("RevInfotech.Models.StateEntity", b =>
                {
                    b.Property<Guid>("StateID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<string>("StateCode");

                    b.Property<string>("StateName");

                    b.Property<bool>("StatusID");

                    b.HasKey("StateID");

                    b.ToTable("StateEntitys");
                });

            modelBuilder.Entity("RevInfotech.Models.UserCodeCardEntity", b =>
                {
                    b.Property<int>("CodeId");

                    b.Property<string>("AccountNo");

                    b.Property<string>("Code");

                    b.HasKey("CodeId", "AccountNo");

                    b.HasAlternateKey("AccountNo", "CodeId");

                    b.ToTable("UserCodeCardEntity");
                });

            modelBuilder.Entity("RevInfotech.Models.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AccountNo");

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<bool>("AutoPay");

                    b.Property<string>("City");

                    b.Property<bool>("CodeCard");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("ContactNo");

                    b.Property<string>("Country");

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<DateTime?>("DBO");

                    b.Property<string>("District");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FacebookUserId");

                    b.Property<string>("FirstName");

                    b.Property<string>("FullName");

                    b.Property<string>("GoogleUserId");

                    b.Property<bool>("IsBlocked");

                    b.Property<string>("KYCCountry");

                    b.Property<DateTimeOffset?>("LastModifiedAt");

                    b.Property<string>("LastName");

                    b.Property<string>("LinkedInUserId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<bool>("LoginAlert");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PinCode");

                    b.Property<bool>("ProfileCompleted");

                    b.Property<DateTime?>("RegistrationDate");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("SocialProviderName");

                    b.Property<string>("Sponsor");

                    b.Property<string>("State");

                    b.Property<long>("TicketUserId");

                    b.Property<string>("TwitterUserId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<bool>("TwoFactorTrans");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("RevInfotech.Models.UserRoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("RevInfotech.Models.UserSecurityQuestionEntity", b =>
                {
                    b.Property<int>("QuestionId");

                    b.Property<string>("AccountId");

                    b.Property<string>("Answer");

                    b.Property<string>("Question");

                    b.HasKey("QuestionId", "AccountId");

                    b.HasAlternateKey("AccountId", "QuestionId");

                    b.ToTable("UserSecurityQuestion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("RevInfotech.Models.UserRoleEntity")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RevInfotech.Models.UserEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RevInfotech.Models.UserEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("RevInfotech.Models.UserRoleEntity")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RevInfotech.Models.UserEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RevInfotech.Models.UserEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RevInfotech.Models.BlogDescription", b =>
                {
                    b.HasOne("RevInfotech.Models.BlogEntity", "BlogEntitys")
                        .WithMany("BlogDescriptions")
                        .HasForeignKey("BlogID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RevInfotech.Models.BlogEntity", b =>
                {
                    b.HasOne("RevInfotech.Models.CategoryEntity", "CategoryEntitys")
                        .WithMany("BlogEntitys")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RevInfotech.Models.BlogImage", b =>
                {
                    b.HasOne("RevInfotech.Models.BlogEntity", "BlogEntitys")
                        .WithMany("BlogImages")
                        .HasForeignKey("BlogID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RevInfotech.Models.CityEntity", b =>
                {
                    b.HasOne("RevInfotech.Models.StateEntity", "stateEntitys")
                        .WithMany("Cityentitys")
                        .HasForeignKey("StateID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
